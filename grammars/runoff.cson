name: "RUNOFF"
scopeName: "text.runoff"
fileTypes: [
	"rnb"
	"rnc"
	"rnd"
	"rne"
	"rnh"
	"rnl"
	"rnm"
	"rno"
	"rnp"
	"rns"
	"rnt"
	"rnx"
	"run"
]
patterns: [include: "#main"]


repository:
	
	# Common patterns
	main:
		patterns: [
			{include: "#comment"}
			{include: "#underline"}
			{include: "#commands"}
			{include: "#special-characters"}
		]
	
	
	# Comment lines
	comment:
		name: "comment.line.runoff"
		begin: "^\\.[!*~]"
		end: "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.runoff"

	
	# Single underlined character
	underline:
		name: "markup.underline.link.runoff"
		match: "[^_]\x08(?=_)|(?<=_)\x08[^_]"


	# Parameters passed to control lines
	arguments:
		patterns: [{
			name: "constant.numeric.runoff"
			match: "[-+]?\\d+(?:\\.\\d+)?"
		},{
			name: "punctuation.separator.comma.runoff"
			match: ","
		},{
			# Double-quoted string
			name: "string.quoted.runoff"
			begin: '"'
			end:   '"'
			beginCaptures: 0: name: "punctuation.definition.string.begin.runoff"
			endCaptures:   0: name: "punctuation.definition.string.end.runoff"
		},{
			# Unquoted string
			name: "variable.parameter.runoff"
			match: "(?!\\.)([^\\s;,]+)"
			captures:
				0: name: "string.unquoted.runoff"
				1: patterns: [include: "#name-innards"]
		}]



	# Control lines
	commands:
		name: "meta.control-line.runoff"
		begin: "^\x0C*(?=\\.)"
		end: "$|;(?!\\.)"
		endCaptures:
			0: name: "punctuation.terminator.statement.runoff"
		patterns: [{
			
			# Trailing comment
			name: "comment.line.runoff"
			begin: "!"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.runoff"
		},{
			
			# .if/.endif: Control flow
			name: "meta.condition.runoff"
			begin: "(?i)(?:^|(?<=;))((\\.)(?:IF|ELSE|ENDIF))(?=$|\\s|;)"
			end: "$|(;)|(?=!)"
			beginCaptures:
				1: name: "keyword.control.runoff"
				2: name: "punctuation.definition.function.runoff"
			endCaptures:
				1: name: "punctuation.terminator.statement.runoff"
			patterns: [include: "#arguments"]
		},{
			
			# .literal: Monospaced text (DIGITAL Standard Runoff)
			contentName: "markup.raw.runoff"
			begin: "(?i)((\\.)LITERAL\\s*)(?:$|\\n)"
			end:   "(?i)((\\.)END\\s+LITERAL)\\b"
			beginCaptures:
				0: name: "keyword.function.name.runoff"
				1: name: "entity.name.function.runoff"
				2: name: "punctuation.definition.function.runoff"
			endCaptures:
				0: name: "keyword.function.name.runoff"
				1: name: "entity.name.function.runoff"
				2: name: "punctuation.definition.function.runoff"
		},{
			
			# .LIT: Literal/monospaced text
			contentName: "markup.raw.runoff"
			begin: "(?i)((\\.)LIT)\\s*(?:$|\\n)"
			end: "(?i)^(?=\\.(?:EL|END\\s+LIT)(?:$|[\\s;!]))"
			beginCaptures:
				0: name: "keyword.function.name.runoff"
				1: name: "entity.name.function.runoff"
				2: name: "punctuation.definition.function.runoff"
		},{
			
			# "Comment" command (debugging feedback?)
			name: "meta.function.debugging-comment.runoff"
			begin: "(?i)((\\.)COMMENT)\\b"
			end: "$|(;)|(?=!)"
			contentName: "string.unquoted.runoff"
			beginCaptures:
				0: name: "keyword.function.name.runoff"
				1: name: "entity.name.function.runoff"
				2: name: "punctuation.definition.function.runoff"
			endCaptures:
				1: name: "punctuation.terminator.statement.runoff"
		},{
			
			# Generic command
			name: "meta.function.runoff"
			begin: "(?i)((\\.)(?:END\\s+)?([^;\\s\\-+]+))"
			end: """(?x)
				$               | # EOL
				(;)?\\s*(?=\\.) | # Followed by another command
				(?=;\\s*[^.])     # No more commands, donâ€™t highlight trailing text as arguments
			"""
			patterns: [include: "#arguments"]
			beginCaptures:
				0: name: "keyword.function.name.runoff"
				1: name: "entity.name.function.runoff"
				2: name: "punctuation.definition.function.runoff"
				3: patterns: [include: "#name-innards"]
			endCaptures:
				1: name: "punctuation.terminator.statement.runoff"
		}]


	# Stuff to highlight inside words (which might also be a chain of commands without spaces)
	"name-innards":
		patterns: [
			{include: "#special-characters"}
			{match: "\\.", name: "punctuation.delimiter.period.full-stop.runoff"}
			{match: "\\,", name: "punctuation.separator.comma.runoff"}
			{match: "\\d+(?=$|\\n|,|\\.(?!\\d))", name: "constant.numeric.runoff"}
		]


	# Characters which affect processing of printed text
	"special-characters":
		patterns: [{
			
			# Escaped special character
			name: "constant.character.escape.special-character.runoff"
			match: "(_)[!^\\\\#&_.]"
			captures:
				1: name: "punctuation.definition.escape.runoff"
		},{
			
			# End of footnote
			name: "keyword.operator.end-footnote.runoff"
			match: "^!"
		},{
			# ^  Uppercase next character
			# ^^ Uppercase next word
			name: "constant.character.escape.uppercase.runoff"
			match: "\\^{1,2}"
			captures:
				0: name: "punctuation.definition.escape.runoff"
		},{
			
			# \  Lowercase next character
			# \\ Lowercase next word
			name: "constant.character.escape.lowercase.runoff"
			match: "\\\\{1,2}"
			captures:
				0: name: "punctuation.definition.escape.runoff"
		},{
			
			# &  Underline next word
			match: "(&)([!^\\\\#&_.]*)(\\S+)"
			captures:
				1: name: "punctuation.definition.entity.runoff"
				2: patterns: [include: "#special-characters"]
				3: name: "markup.underline.link.runoff"
		},{
			# # "Quoted" space (no filling/justification)
			name: "constant.character.escape.space.runoff"
			match: "#"
			captures:
				0: name: "punctuation.definition.escape.runoff"
		}]
