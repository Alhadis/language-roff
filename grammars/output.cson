name: "Roff (Intermediate Output)"
scopeName: "source.ditroff"
firstLineMatch: "^x\\s*T\\s+(dvi|html|lbp|lj4|ps|post|pdf|ascii|cp1047|latin1|utf8|X75|X75-12|X100|X100-12)(?=\\s|$)"
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#deviceControl"}
			{include: "#colourMode"}
			{include: "#print"}
			{include: "#font"}
			{include: "#eol"}
			{include: "#move"}
			{include: "#size"}
			{include: "#page"}
			{include: "#graphics"}
			{include: "#movePrint"}
			{include: "#wordSpace"}
		]

	
	# Change colour model (GNU extension)
	colourMode:
		patterns: [{
			# Restore default
			name: "meta.colour-mode.default.gnu.ditroff"
			match: "(?:(m)|^\\s*(D)\\s*(F))\\s*(d)"
			captures:
				1: name: "entity.name.function.ditroff"
				2: name: "entity.name.function.ditroff"
				3: name: "entity.name.subcommand.ditroff"
				4: name: "constant.language.colour-scheme.ditroff"
		},{
			# RGB
			name: "meta.colour-mode.rgb.gnu.ditroff"
			match: "(?:(m)|^\\s*(D)\\s*(F))\\s*(r)((?:\\s*\\d+){3})"
			captures:
				1: name: "entity.name.function.ditroff"
				2: name: "entity.name.function.ditroff"
				3: name: "entity.name.subcommand.ditroff"
				4: name: "constant.language.colour-scheme.ditroff"
				5: patterns: [include: "text.roff#number"]
		},{
			# CMYK
			name: "meta.colour-mode.cmyk.gnu.ditroff"
			match: "(?:(m)|^\\s*(D)\\s*(F))\\s*(k)((?:\\s*\\d+){4})"
			captures:
				1: name: "entity.name.function.ditroff"
				2: name: "entity.name.function.ditroff"
				3: name: "entity.name.subcommand.ditroff"
				4: name: "constant.language.colour-scheme.ditroff"
				5: patterns: [include: "text.roff#number"]
		},{
			# CMY
			name: "meta.colour-mode.cmy.gnu.ditroff"
			match: "(?:(m)|^\\s*(D)\\s*(F))\\s*(c)((?:\\s*\\d+){3})"
			captures:
				1: name: "entity.name.function.ditroff"
				2: name: "entity.name.function.ditroff"
				3: name: "entity.name.subcommand.ditroff"
				4: name: "constant.language.colour-scheme.ditroff"
				5: patterns: [include: "text.roff#number"]
		},{
			# Greyscale
			name: "meta.colour-mode.grey.gnu.ditroff"
			match: "(?:(m)|^\\s*(D)\\s*(F))\\s*(g)\\s*(\\d+)"
			captures:
				1: name: "entity.name.function.ditroff"
				2: name: "entity.name.function.ditroff"
				3: name: "entity.name.subcommand.ditroff"
				4: name: "constant.language.colour-scheme.ditroff"
				5: patterns: [include: "text.roff#number"]
		}]


	# Comment
	comment:
		name: "comment.line.number-sign.ditroff"
		begin: "#"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.ditroff"
	
	
	# Line continuation (GNU extension)
	continueLine:
		name: "keyword.operator.line-continuation.gnu.ditroff"
		match: "^\\+"
	
	
	# Device control functions
	deviceControl:
		patterns: [{
			# Device-specific commands generated by \X'…'
			name:  "meta.device-control.x-command.ditroff"
			begin: "(x)\\s*(X\\S*)[ \\t]*"
			end:   "(?=^(?!\\+))(?!\\G)"
			beginCaptures:
				0: name: "meta.device-control.lhs.ditroff"
				1: name: "keyword.operator.other.ditroff"
				2: name: "keyword.device.control.ditroff"
			patterns: [include: "#xCommands"]
		},{
			# Everything else
			name: "meta.device-control.ditroff"
			begin: "(x)\\s*"
			end:   "(?=$|#)"
			beginCaptures:
				0: name: "meta.device-control.lhs.ditroff"
				1: name: "keyword.operator.other.ditroff"
			patterns: [{
				# Niladic commands
				name: "keyword.device.control.ditroff"
				match: "\\G([ipst]\\S*)\\s*?(?=$|#)"
			},{
				# Space underlining (GNU extension)
				name: "meta.space-underlining.gnu.ditroff"
				match: "\\G(u\\S*)\\s+(?:(1|0)|(\\d+))\\s*?(?=$|#)"
				captures:
					1: name: "keyword.device.control.ditroff"
					2: name: "constant.numeric.integer.ditroff"
					3: name: "invalid.illegal.argument.ditroff"
			},{
				# Name of source file (GNU extension)
				name: "meta.source-filename.gnu.ditroff"
				match: "\\G(F\\S*)\\s+(\\S+)\\s*?(?=$|#)"
				captures:
					1: name: "keyword.device.control.ditroff"
					2: name: "string.other.link.filename.ditroff"
			},{
				# Name of target output device
				name: "meta.typesetter-device.ditroff"
				match: "\\G(T\\S*)\\s+(\\S+)"
				captures:
					1: name: "keyword.device.control.ditroff"
					2: name: "support.constant.device-name.ditroff"
			},{
				# Output resolution
				name: "meta.device-resolution.ditroff"
				match: "\\G(r\\S*)((?:\\s+(\\d+)){1,3})\\s*?(?=$|#)"
				captures:
					1: name: "keyword.device.control.ditroff"
					2: patterns: [include: "text.roff#number"]
			},{
				# Mount font X on position N
				name: "meta.mount-font.ditroff"
				match: "\\G(f\\S*)(?:\\s+(\\d+))?(?:\\s+([-\\w]+))?(?:\\s+(\\S.*?)\\s+(\\d+)[ \\t]*$)?[ \\t]*?(?=$|#)"
				captures:
					1: name: "keyword.device.control.ditroff"
					2: name: "constant.numeric.integer.position.ditroff"
					3: name: "entity.name.font.ditroff"
					4: name: "string.other.link.filename.ditroff"
					5: name: "constant.numeric.integer.flags.ditroff"
			},{
				# Load metrics for a font (Heirloom extension)
				name: "meta.mount-font.ditroff"
				match: "\\G(f\\S*)(?:\\s+(\\d+))?(?:\\s+([-\\w]+))?\\s*?(?=$|#)"
				captures:
					1: name: "keyword.device.control.ditroff"
					2: name: "constant.numeric.integer.ditroff"
					3: name: "variable.parameter.ditroff"
			},{
				# Set character height or slant
				name: "meta.set-character-property.ditroff"
				match: "\\G([HS]\\S*)(?:\\s+(-?\\d+)|\\s+(-23)\\s+(-?[\\d.]+))?\\s*?(?=$|#)"
				captures:
					1: name: "keyword.device.control.ditroff"
					2: name: "constant.numeric.integer.ditroff"
					3: name: "constant.numeric.ignored.ditroff"
					4: name: "constant.numeric.float.ditroff"
			},{
				# Unrecognised device control command
				name: "meta.unknown-command.ditroff"
				begin: "\\G(\\S+)"
				end:   "(?=$|#)"
				beginCaptures:
					1: name: "keyword.device.control.ditroff"
			}]
		}]


	# End-of-line: information only, no action
	eol:
		name: "meta.end-of-line.ditroff"
		match: "(n)((?:\\s*\\d+){2})"
		captures:
			1: name: "entity.name.function.ditroff"
			2: patterns: [include: "text.roff#number"]
		
	
	# Change font
	font:
		name: "meta.change-font.ditroff"
		match: "(f)\\s*(\\d+)"
		captures:
			1: name: "entity.name.function.ditroff"
			2: name: "constant.numeric.integer.ditroff"
	
	
	# Drawing commands
	graphics:
		patterns: [{
			# Coloured circle (GNU extension)
			name: "meta.graphics.gnu.ditroff"
			match: "^\\s*(D)\\s*(C)\\s*(\\d+)(?:\\s+(\\d+))?"
			captures:
				1: name: "entity.name.function.ditroff"
				2: name: "entity.name.subcommand.ditroff"
				3: name: "constant.numeric.integer.ditroff"
				4: name: "comment.dummy.argument.ditroff"
		},{
			# Coloured ellipse (GNU extension)
			name: "meta.graphics.gnu.ditroff"
			match: "^\\s*(D)\\s*(E)((?:\\s*(\\d+)){1,2})"
			captures:
				1: name: "entity.name.function.ditroff"
				2: name: "entity.name.subcommand.ditroff"
				3: patterns: [include: "text.roff#number"]
		},{
			# Everything else
			name: "meta.graphics.ditroff"
			begin: "^\\s*(D)\\s*([lceafptP~])"
			end:   "(?=$|#)"
			patterns: [include: "text.roff#number"]
			beginCaptures:
				1: name: "entity.name.function.ditroff"
				2: name: "entity.name.subcommand.ditroff"
		},{
			# Unrecognised drawing command
			name: "meta.graphics.unknown-command.ditroff"
			begin: "^\\s*(D)\\s*([^\\s\\\\])"
			end:   "(?=$|#)"
			contentName: "variable.parameter.ditroff"
			beginCaptures:
				1: name: "entity.name.function.ditroff"
				2: name: "entity.name.custom.subcommand.ditroff"
		}]
	
	
	# Move X units vertically or horizontally
	move:
		name: "meta.move.ditroff"
		match: "([HhVv])\\s*(-?\\d+)"
		captures:
			1: name: "entity.name.function.ditroff"
			2: name: "constant.numeric.integer.ditroff"
	
	
	# Move right by X units, then print Y character
	movePrint:
		name: "meta.move-and-print.ditroff"
		match: "(\\d{2})(.)"
		captures:
			1: name: "entity.name.function.ditroff"
			2: name: "constant.character.ditroff"
	
	
	# Begin page X
	page:
		name: "meta.start-page.ditroff"
		match: "(p)\\s*(\\d+)"
		captures:
			1: name: "keyword.control.page.output"
			2: name: "constant.numeric.integer.output"
	
	
	# Print ASCII character/s
	print:
		patterns: [{
			
			# Print character by index in current font
			name: "meta.print-character.indexed.ditroff"
			match: "(N)\\s*(-?\\d+)"
			captures:
				1: name: "entity.name.function.ditroff"
				2: name: "constant.numeric.integer.ditroff"
		},{
			# Print literal characters
			name: "meta.print-character.ditroff"
			match: "(c)\\s*(\\S)|(C)\\s*(\\S+)"
			captures:
				1: name: "entity.name.function.ditroff"
				2: name: "constant.character.ditroff"
				3: name: "entity.name.function.ditroff"
				4: name: "string.unquoted.ditroff"
		},{
			# Print sequence of named glyphs (GNU extension)
			name: "meta.print-text.gnu.ditroff"
			begin: "^\\s*(t)\\s*"
			end:   "(?=$)|\\s+(\\d*)"
			contentName: "string.quoted.double.ditroff"
			beginCaptures:
				0: name: "entity.name.function.ditroff"
				1: name: "punctuation.definition.entity.ditroff"
			endCaptures:
				1: name: "comment.dummy.argument.ditroff"
		},{
			# Print text with track-kerning (GNU)
			name: "meta.print-text.track-kerned.gnu.ditroff"
			begin: "^\\s*(u)\\s*(-?\\d+)\\s*"
			end:   "(?=\\s|$)"
			contentName: "string.quoted.double.ditroff"
			beginCaptures:
				1: name: "entity.name.function.ditroff"
				2: name: "constant.numeric.integer.ditroff"
		}]


	# Change point-size
	size:
		match: "(s)\\s*(\\d+)"
		captures:
			1: name: "entity.name.function.ditroff"
			2: name: "constant.numeric.integer.ditroff"


	# Paddable word-space: information only, no action
	wordSpace:
		name: "entity.name.function.word-space.ditroff"
		match: "(?<=^|[\\s\\d])w"


	# Stuff passed to \X'…'
	xCommands:
		patterns: [{
			# Embedded PostScript/PDF source
			begin: "(?:\\G|^)(?:(ps)\\s*(:)(?=\\s*(?:exec|m?def)\\b)|(PSSetup|PS)\\s*(:)?)"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.gnu.ditroff"
				3: name: "keyword.device.control.subcommand.heirloom.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
				4: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [{
				begin: "\\G(?:(?<=:)\\s*(?:(exec|def)|(mdef)(?:\\s+(\\d+))?)\\b)?\\s*"
				end:   "(?=^(?!\\+))"
				beginCaptures:
					1: name: "keyword.control.directive.gnu.ditroff"
					2: name: "keyword.control.directive.gnu.ditroff"
					3: name: "constant.numeric.integer.ditroff"
				patterns: [include: "#continueLine", {
					name: "source.embedded.postscript"
					match: ".+"
					captures: 0: patterns: [include: "source.postscript"]
				}]
			}, include: "#continueLine"]
		},{
			# grops(1) directives
			begin: "(?:\\G|^)(ps)\\s*(:)"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.gnu.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [{
				# Toggle output-suppression
				match: "\\G\\s*(?:(invis)|(endinvis))\\b"
				captures:
					1: name: "keyword.control.suppress-output.begin.gnu.ditroff"
					2: name: "keyword.control.suppress-output.end.gnu.ditroff"
			},{
				# Execute PostScript file
				begin: "\\G\\s*(file)\\s+"
				end:   "(?=^(?!\\+))"
				beginCaptures:
					1: name: "keyword.control.directive.gnu.ditroff"
				contentName: "string.other.link.filename.ditroff"
				patterns: [include: "#continueLine"]
			},{
				# Import PostScript graphic
				begin: "\\G\\s*(import)\\s+"
				end:   "(?=^(?!\\+))"
				beginCaptures:
					1: name: "keyword.control.directive.gnu.ditroff"
				patterns: [include: "#xImportParams"]
			}, include: "#continueLine"]
		},{
			# gropdf(1) directives
			begin: "(?:\\G|^)(pdf)\\s*(:)"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.gnu.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [{
				# Toggle reversed-letter printing
				name: "keyword.control.directive.gnu.ditroff"
				match: "\\G\\s*(xrev)\\b"
			},{
				# Import PDF graphic
				begin: "\\G\\s*(pdfpic)\\s+"
				end:   "(?=^(?!\\+))"
				beginCaptures:
					1: name: "keyword.control.directive.gnu.ditroff"
				patterns: [include: "#xImportParams"]
			},{
				# PDFMark manipulation and internals
				name:  "meta.pdfmark.$2.ditroff"
				begin: "\\G\\s*(mark(start|end|suspend|restart))\\b(\\s+(\\S.*))?"
				end:   "(?=^(?!\\+))"
				beginCaptures:
					1: name: "keyword.control.directive.gnu.ditroff"
					2: name: "source.embedded.postscript"
					3: patterns: [include: "source.postscript"]
			},{
				# PDF transition
				name:  "meta.transition-settings.ditroff"
				begin: "\\G\\s*(transition)\\s+"
				end:   "(?=^(?!\\+))"
				beginCaptures:
					1: name: "keyword.control.directive.gnu.ditroff"
				patterns: [
					name:  "support.constant.other.mode.ditroff"
					match: "\\b(Blinds|Box|Cover|Dissolve|Fade|Fly|Glitter|Push|R|Split|Uncover|Wipe)\\b"
					
					{name: "constant.language.boolean.$1.ditroff", match: "\\b(true|false)\\b"}
					{name: "constant.language.null.ditroff",       match: "\\b(?:None)\\b"}
					{name: "support.constant.feature.ditroff",     match: "\\b(?:SLIDE|BLOCK)\\b"}
					{name: "support.constant.dimension.ditroff",   match: "\\b(?:H|V)\\b"}
					{name: "support.constant.motion.ditroff",      match: "\\b(?:I|O)\\b"}
					{name: "constant.numeric.ditroff",             match: "[-+]?[\\d.]+"}
					{include: "#continueLine"}]
			}, include: "#continueLine"]
		},{
			# PDFMark (Heirloom Doctools syntax)
			name:  "meta.pdfmark.ditroff"
			begin: "(?:\\G|^)(PDFMark)\\b(?:\\s*(:))?"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [{
				# Bookmark: [level=0] …name
				name:  "meta.bookmark.ditroff"
				begin: "\\G\\s*(Bookmark(?:Closed)?)(?:\\s+(\\d+))?\\s+"
				end:   "(?=^(?!\\+))"
				beginCaptures:
					1: name: "storage.type.bookmark.ditroff"
					2: name: "constant.numeric.integer.level.ditroff"
				contentName: "string.unquoted.ditroff"
			},{
				# Anything else: [key] …value
				name:  "meta.pdfmark.ditroff"
				begin: "\\G\\s*(\\S+)\\s+"
				end:   "(?=^(?!\\+))"
				contentName: "string.unquoted.ditroff"
				beginCaptures:
					1: name: "entity.name.field.ditroff"
			}, include: "#continueLine"]
		},{
			# grotty(1) directives
			begin: "(?:\\G|^)(tty)\s*(:)"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.gnu.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [{
				match: "\\G\\s*(sgr)\\b(?:\\s+([-+]?[\\d.0]+))?"
				captures:
					1: name: "keyword.control.directive.gnu.ditroff"
					2: name: "constant.numeric.ditroff"
			}, include: "#continueLine"]
		},{
			# Set paper-size (grodvi(1) directive)
			name:  "meta.set-paper-size.ditroff"
			begin: "(?:\\G|^)(papersize)\\s*(=)"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "storage.type.paper-size.ditroff"
				2: name: "punctuation.separator.key-value.equals-sign.ditroff"
			patterns: [include: "source.ditroff.desc#paperSizes"]
		},{
			# Semantic tag information (devtags)
			name:  "meta.devtag.ditroff"
			begin: "(?:\\G|^)(devtag)\\s*(:)"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [include: "#continueLine", {
				name: "constant.numeric.ditroff"
				match: "[-+]?\\d+(?:\\.\\d+)?"
			},{
				name: "entity.name.tag.ditroff"
				match: "\\.?[^\\s.]+(?:\\.[^\\s.]+)*+"
				captures:
					0: name: "punctuation.definition.tag.ditroff"
			}]
		},{
			# Semantic tag information (infer(1) directives)
			name:  "meta.infer.ditroff"
			begin: "(?:\\G|^)(infer)\\s*(:)"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [include: "#continueLine", {
				name:  "meta.$1-$2.ditroff"
				begin: "\\G\\s*(start|end)\\s+(\\S+)(?=\\s|$)"
				end:   "(?=^(?!\\+))"
				beginCaptures:
					1: name: "keyword.control.$1-scope.ditroff"
					2: name: "entity.name.type.ditroff"
				patterns: [
					{include: "#continueLine"}
					{match: ".+", name: "support.constant.other.ditroff"}
				]
			}]
		},{
			# troff2html(1) extension
			name:  "meta.manpage-reference.ditroff"
			match: "(?:\\G|^)(html)\\s+(?:(manref\\s+end)|(manref(?:\\s+start)?))(?:\\s+((?!#)\\S+))(?:\\s+(?:(\\()([0-9])(\\))|((?!#)\\S+)))"
			captures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "keyword.control.end-reference.ditroff"
				3: name: "keyword.control.start-reference.ditroff"
				4: name: "entity.name.subject.ditroff"
				5: name: "punctuation.definition.bracket.round.begin.ditroff"
				6: name: "constant.numeric.section.ditroff"
				7: name: "punctuation.definition.bracket.round.end.ditroff"
				8: name: "constant.numeric.section.ditroff"
		},{
			# grohtml(1) directive, used internally
			begin: "(?:\\G|^)(index)\\s*(:)(?:\\s*(\\d+)(?=\\s))?.*"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
				3: name: "constant.numeric.integer.ditroff"
			patterns: [include: "#continueLine"]
		},{
			# Some undocumented directive in `src/devices/grohtml/post-html.cpp`
			name:  "meta.assertion.ditroff"
			begin: "(?:\\G|^)(assertion)\\s*(:)(?=\\s*\\[)"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [{
				begin: "\\G\\s*(\\[)(x|y)?"
				end:   "\\*(\\])|(?=^(?!\\+))"
				beginCaptures:
					1: name: "punctuation.section.bracket.square.begin.ditroff"
					2: name: "variable.parameter.assertion-type.$2.ditroff"
				endCaptures:
					1: name: "punctuation.section.bracket.square.end.ditroff"
				contentName: "string.raw.unquoted.heredoc.ditroff"
				patterns: [include: "#continueLine"]
			}, include: "#continueLine"]
		},{
			# Embedded HTML/MathML markup
			begin: "(?:\\G|^)((?:html|math)\\b(?:<[/?]p>)?)(?:\\s*(:))?"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [{
				begin: "\\G[ \\t]*"
				end:   "(?=^(?!\\+))"
				patterns: [include: "#continueLine", {
					name: "text.embedded.html.basic"
					match: ".+"
					captures:
						0: patterns: [include: "text.html.basic"]
				}]
			}, include: "#continueLine"]
		},{
			# Anchor/Link (Heirloom Doctools extensions)
			begin: "(?:\\G|^)(Anchor|U?Link)\\b(?:\\s*(:))?"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [{
				begin: "\\G(?:\\s+([+-]?\\d+(?:,[+-]?\\d+)*+)(?=\\s))?\\s*"
				end:   "(?=^(?!\\+))"
				contentName: "string.other.link.ditroff"
				beginCaptures: 1: patterns: [
					{match: "\\d+", name: "constant.numeric.integer.ditroff"}
					{match: ",",    name: "punctuation.separator.comma.ditroff"}]
				patterns: [include: "#continueLine"]
			}, include: "#continueLine"]
		},{
			# Heirloom extensions which only take numeric arguments
			begin: "(?:\\G|^)(BleedAt|CropAt|HorScale|PaperSize|Track|TrimAt)\\b(?:\\s*(:))?"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [
				{match: "[-+]?\\d+(?:\\.\\d+)?", name: "constant.numeric.ditroff"}
				{include: "#continueLine"}
			]
		},{
			# Set locale(3) type (Heirloom extension)
			match: "(?:\\G|^)(LC_CTYPE)\\b(?:\\s*(:))?\\s+((?!#)\\S+)(.*)"
			captures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
				3: name: "entity.name.locale.ditroff"
				4: patterns: [include: "#comment"]
		},{
			# Load font-file (Heirloom extension)
			begin: "(?:\\G|^)(SupplyFont)\\b(?:\\s*(:))?"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [{
				begin: "\\G\\s*(\\S+)[ \\t]*"
				end:   "(?=^(?!\\+))"
				beginCaptures:
					1: name: "entity.name.font.ditroff"
				contentName: "string.other.link.filename.ditroff"
				patterns: [include: "#continueLine"]
			}, include: "#continueLine"]
		},{
			# Set printing colour (Heirloom extension)
			begin: "(?:\\G|^)(SetColor)\\b(?:\\s*(:))?"
			end:   "(?=^(?!\\+))"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [{
				match: "(?:\\G|^)\\s*(?:([\\s\\d.]+)(?<=\\s)(rgb|hsb|cmyk|setgray|setcolor)|(\\S+))"
				captures:
					1: patterns: [match: "[\\d.]+", name: "constant.numeric.ditroff"]
					2: name: "constant.language.colour-scheme.ditroff"
					3: name: "variable.other.named-colour.ditroff"
			}, include: "#continueLine"]
		},{
			# Anything else
			begin: "(?:\\G|^)([^\\s:#]+)(?:\\s*(:))?"
			end:   "(?=^(?!\\+))"
			contentName: "string.raw.unquoted.heredoc.ditroff"
			beginCaptures:
				1: name: "keyword.device.control.subcommand.ditroff"
				2: name: "punctuation.separator.key-value.colon.ditroff"
			patterns: [include: "#continueLine"]
		}, include: "#continueLine"]


	# Patterns shared by import-like PDF/PostScript directives
	xImportParams:
		patterns: [{
			# Filename + Alignment
			match: "(?:\\G|^)(\\S+)(?:\\s+((-)[LCR]))?"
			captures:
				1: name: "string.other.link.filename.ditroff"
				2: name: "constant.language.alignment-type.ditroff"
				3: name: "punctuation.definition.dash.ditroff"
		},{
			name: "constant.numeric.ditroff"
			match: "[-+]?(?:\\d*\\.\\d+|\\d+)"
		}, include: "#continueLine"]
