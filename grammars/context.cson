name: "Context (SQTroff Intermediate Output)"
scopeName: "source.context"
fileTypes: ["sqtroff"]
firstLineMatch: "^X\\s+(?:495|crt|hp|impr|ps)(?:\\s+\\d+){3}[ \\t]*$"
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#line"}
			{include: "#page"}
			{include: "#init"}
			{include: "#pageinfo"}
			{include: "#commands"}
		]


	# Display character bitmap read from sqbitmap(5) file
	bitmap:
		name:  "meta.command.display-bitmap.context"
		begin: "^[ \\t]*(B)(?=$|\\s)[ \\t]*"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			contentName: "string.unquoted.filename.context"
			begin: "\\G(\\d+)(?:\\s+(\\d+))?"
			end:   "[ \\t]*$"
			captures:
				1: name: "constant.numeric.bitmap-width.context"
				2: name: "constant.numeric.bitmap-height.context"
		}]


	# Command lines
	commands:
		patterns: [
			{include: "#comment"}
			{include: "#text"}
			{include: "#bitmap"}
			{include: "#drawing"}
			{include: "#escape-interpretation"}
			{include: "#escape-to-device"}
			{include: "#font"}
			{include: "#indent"}
			{include: "#kerning"}
			{include: "#line-length"}
			{include: "#motion"}
			{include: "#offset"}
			{include: "#shift"}
			{include: "#vertical-spacing"}
			{include: "#sentence-space"}
			{include: "#extra-space"}
			{include: "#embolden"}
			{include: "#constant-space"}
			{include: "#slant"}
			{include: "#height"}
			{include: "#zero-width-print"}
			{include: "#unknown-line"}
		]


	# PostScript-style comment lines
	comment:
		name:  "comment.line.percentage.context"
		begin: "%"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.context"
		patterns: [{
			# Category indicator/message severity level
			begin: "\\G\\s*([DETW])(?=[ \\t])"
			end: "$"
			beginCaptures:
				1: name: "storage.modifier.message-category.context"
			patterns: [{
				# ‚Äú% E {error message}‚Äù
				contentName: "message.error.context"
				begin: "(?<=E)\\G[ \\t]*"
				end:   "[ \\t]*$"
			},{
				# ‚Äú% W {warning message}‚Äù
				contentName: "sublimelinter.mark.warning.context"
				begin: "(?<=W)\\G[ \\t]*"
				end:   "[ \\t]*$"
			},{
				# Every other level: D=Debug, I=Info, T=Traceback
				name:  "constant.other.debug-message.context"
				begin: "\\G[ \\t]*"
				end:   "[ \\t]*$"
			}]
		},{
			# Infomation message generated by `.fp` requests:
			# ‚Äú% I {fp} {font-position} {typeface-name}‚Äù
			match: "\\G\\s*(I)[ \\t]+(fp)\\s+(\\d+)\\s+(\\S+)(?:[ \\t]+(\\S.*?))?[ \\t]*$"
			captures:
				1: name: "storage.modifier.message-category.context"
				2: name: "entity.name.tag.request.context"
				3: name: "constant.character.numeric.font-position.context"
				4: name: "variable.reference.typeface-name.context"
				5: name: "invalid.illegal.superfluous-arguments.context"
		}]


	# Enable constant character spacing: ‚Äúx cs {n} {m}‚Äù
	"constant-space":
		name:  "meta.command.fixed-pitch.context"
		begin: "^[ \\t]*(x)\\s+(cs)(?=$|\\s)[ \\t]*"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
			2: name: "keyword.operator.subcommand.context"
		patterns: [{
			match: "\\G(-?\\d+)\\s+(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "constant.numeric.integer.decimal.width.current-font.context"
				2: name: "constant.numeric.integer.decimal.width.search-fonts.context"
				3: name: "invalid.illegal.superfluous-arguments.context"
		}]


	# Path drawing
	drawing:
		name:  "meta.command.line-drawing.context"
		begin: "^[ \\t]*(D)\\s+(?=\\S)"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			# Arc from current position: ‚ÄúD a {x} {y} {dx} {dy}‚Äù
			match: "\\G(a)\\s+(-?\\d+)\\s+(-?\\d+)\\s+(-?\\d+)\\s+(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "storage.type.drawing.draw-arc.context"
				2: name: "constant.numeric.integer.decimal.x-coordinate.context"
				3: name: "constant.numeric.integer.decimal.y-coordinate.context"
				4: name: "constant.numeric.integer.decimal.dx-coordinate.context"
				5: name: "constant.numeric.integer.decimal.dy-coordinate.context"
				6: name: "invalid.illegal.superfluous-arguments.context"
		},{
			# Box at current position: ‚ÄúD b {right-edge} {bottom-edge}‚Äù
			match: "\\G(b)\\s+(-?\\d+)\\s+(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "storage.type.drawing.draw-box.context"
				2: name: "constant.numeric.integer.decimal.x-coordinate.context"
				3: name: "constant.numeric.integer.decimal.y-coordinate.context"
				4: name: "invalid.illegal.superfluous-arguments.context"
		},{
			# Circle centred at current position: ‚ÄúD c {radius}‚Äù
			match: "\\G(c)\\s+(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "storage.type.drawing.draw-circle.context"
				2: name: "constant.numeric.integer.decimal.radius.context"
				3: name: "invalid.illegal.superfluous-arguments.context"
		},{
			# Ellipse: ‚ÄúD e {x} {y}‚Äù
			match: "\\G(e)\\s+(-?\\d+)\\s+(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "storage.type.drawing.draw-ellipse.context"
				2: name: "constant.numeric.integer.decimal.x-coordinate.context"
				3: name: "constant.numeric.integer.decimal.y-coordinate.context"
				4: name: "invalid.illegal.superfluous-arguments.context"
		},{
			# Figure fill pattern for subsequent arcs, boxes, circles and ellipses: ‚ÄúD f {n}‚Äù
			match: "\\G(f)\\s+(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "storage.type.drawing.figure-fill-pattern.context"
				2: name: "constant.numeric.integer.decimal.context" # Purpose unknown
				3: name: "invalid.illegal.superfluous-arguments.context"
		},{
			# Line from current position: ‚ÄúD l {x} {y}‚Äù
			match: "\\G(l)\\s+(-?\\d+)\\s+(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "storage.type.drawing.draw-line.context"
				2: name: "constant.numeric.integer.decimal.x-coordinate.context"
				3: name: "constant.numeric.integer.decimal.y-coordinate.context"
				4: name: "invalid.illegal.superfluous-arguments.context"
		},{
			# Line thickness for subsequent drawing requests: ‚ÄúD t {n}‚Äù
			match: "\\G(t)\\s+(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "storage.type.drawing.line-thickness.context"
				2: name: "constant.numeric.integer.decimal.thickness.context"
				3: name: "invalid.illegal.superfluous-arguments.context"
		},{
			# Greyscale for subsequent line-drawing requests: ‚ÄúD w {n}‚Äù
			match: "\\G(w)\\s+(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "storage.type.drawing.greyscale-value.context"
				2: name: "constant.numeric.integer.decimal.darkness.context"
				3: name: "invalid.illegal.superfluous-arguments.context"
		},{
			# Spline drawn from variable coordinates list: ‚ÄúD ~ {x1} {y1} {x2} {y2} ‚Ä¶‚Äù
			begin: "\\G(~)(?=$|\\s)"
			end:   "(?=\\s*$)|(\\S.*?)[ \\t]*$"
			applyEndPatternLast: yes
			beginCaptures: 1: name: "storage.type.drawing.draw-spline.context"
			endCaptures:   1: name: "invalid.illegal.bad-argument.context"
			patterns: [{
				# Individual coordinate pairs
				match: "(?:\\G|(?<=\\s))(-?\\d+)\\s+(-?\\d+)(?=$|\\s)"
				captures:
					1: name: "constant.numeric.integer.decimal.x-coordinate.context"
					2: name: "constant.numeric.integer.decimal.y-coordinate.context"
			}]
		}]


	# Embolden font: ‚Äúx bd {n} {m}‚Äù
	embolden:
		name:  "meta.command.embolden-font.context"
		begin: "^[ \\t]*(x)\\s+(bd)(?=$|\\s)[ \\t]*"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
			2: name: "keyword.operator.subcommand.context"
		patterns: [{
			match: "\\G(-?\\d+)\\s+(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "constant.numeric.integer.decimal.boldness.current-font.context"
				2: name: "constant.numeric.integer.decimal.boldness.search-fonts.context"
				3: name: "invalid.illegal.superfluous-arguments.context"
		}]


	# ‚ÄúEscape interpretation‚Äù, whatever that means
	"escape-interpretation":
		name:  "meta.command.escape-interpretation.context"
		begin: "^[ \\t]*(E)(?=$|\\s)"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			name:  "storage.type.$1-escape.context"
			match: "\\G\\s*(cmd|nl|oc|<)(?=$|\\s)"
		},{
			# Filter program receiving subsequent lines as input
			match: "(?<=cmd)\\s+(\\S.*?)(?=\\s*$)"
			captures: 1:
				name: "source.embedded.shell"
				patterns: [include: "source.shell"]
		},{
			# Enable/disable the adding of newlines to subsequent ‚Äúe‚Äù lines
			name: "meta.set-newline-mode.context"
			match: "(?<=nl)\\s+(on|off)(?=\\s*$)"
			captures:
				1: name: "constant.language.boolean.$1.context"
		},{
			# Change octal indicator to specified character
			name: "meta.set-octal-indicator.context"
			match: "(?<=oc)\\s+(\\S)(?=\\s*$)"
			captures:
				1: name: "constant.character.single.context"
		},{
			# Send filename to output driver without any interpretation
			name: "meta.transparent-passthrough.context"
			match: "(?<=<)\\s+(\\S.*?)[ \\t]*$"
			captures:
				1: name: "constant.other.reference.link.filename.context"
		}]


	# Send text directly to output driver
	"escape-to-device":
		name:  "meta.command.escape-to-device.context"
		begin: "^[ \\t]*(e)(?=$|\\s)[ \\t]*"
		end:   "[ \\t]*$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		contentName: "markup.raw.verbatim.context"


	# Output ùëÅ basic units of extra space before or after next line
	"extra-space":
		patterns: [{
			# Space after next line: ‚Äúx a {n}‚Äù
			name:  "meta.command.extra-space.after-next-line.context"
			begin: "^[ \\t]*(x)\\s+(a)(?=$|\\s)[ \\t]*"
			end:   "$"
			beginCaptures:
				1: name: "keyword.operator.command.context"
				2: name: "keyword.operator.subcommand.context"
			patterns: [include: "#extra-space-arg"]
		},{
			# Space before next line: ‚Äúx b {n}‚Äù
			name:  "meta.command.extra-space.before-next-line.context"
			begin: "^[ \\t]*(x)\\s+(b)(?=$|\\s)[ \\t]*"
			end:   "$"
			beginCaptures:
				1: name: "keyword.operator.command.context"
				2: name: "keyword.operator.subcommand.context"
			patterns: [include: "#extra-space-arg"]
		}]

	# Rule for matching first argument of both ‚Äú#extra-space‚Äù patterns
	"extra-space-arg":
		match: "\\G(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
		captures:
			1: name: "constant.numeric.integer.decimal.offset.context"
			2: name: "invalid.illegal.superfluous-arguments.context"


	# Change typeface and point-size: ‚Äúf {size} {face}‚Äù
	font:
		name:  "meta.command.set-font.context"
		begin: "^[ \\t]*(f)(?=$|\\s)[ \\t]*"
		end:   "[ \\t]*$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			match: "\\G(-?\\d+)\\s+(\\S.*?)[ \\t]*$"
			captures:
				1: name: "constant.numeric.integer.decimal.point-size.context"
				2: name: "variable.reference.typeface-name.context"
		}]


	# Set character height to ùëÅ points: ‚Äúx Height {n}‚Äù
	height:
		name:  "meta.command.character-height.context"
		begin: "^[ \\t]*(x)\\s+(Height)(?=$|\\s)[ \\t]*"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
			2: name: "keyword.operator.subcommand.context"
		patterns: [{
			match: "\\G(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "constant.numeric.integer.decimal.height.context"
				2: name: "invalid.illegal.superfluous-arguments.context"
		}]


	# Change indentation to ùëÅ basic units: ‚ÄúI {n}‚Äù
	indent:
		name:  "meta.command.set-indentation.context"
		begin: "^[ \\t]*(I)(?=$|\\s)[ \\t]*"
		end:   "[ \\t]*$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			name: "constant.numeric.integer.decimal.indent-size.context"
			match: "\\G-?\\d+(?=$|\\s)"
		}]


	# Device initialisation command: ‚ÄúX Device(avail) {res} {hor} {vert}‚Äù
	init:
		name:  "meta.command.initialise-device.context"
		begin: "^[ \\t]*(X)\\s+((?!-)[-\\w]+)(?=\\s|\\()"
		end:   "$"
		beginCaptures:
			1: name: "keyword.control.initialise-device.context"
			2: name: "entity.name.device.context"
		patterns: [{
			# Parenthetical immediately following device name
			name:  "meta.parameters.context"
			begin: "\\G\\("
			end:   "(\\))|([^)]*?)$"
			beginCaptures:
				0: name: "punctuation.definition.parameters.begin.bracket.round.context"
			endCaptures:
				1: name: "punctuation.definition.parameters.end.bracket.round.context"
				2: name: "invalid.illegal.missing-bracket.context"
			patterns: [{
				# XXX: The SQTroff manual is vague when describing these
				name:  "entity.other.available-physical-font-prefix.context"
				match: "[^\\s)]+"
			}]
		},{
			# The last three parameters
			match: "(?<=\\s)(\\d+)\\s+(\\d+)\\s+(\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "constant.numeric.integer.decimal.resolution.context"
				2: name: "constant.numeric.integer.decimal.minimum-horizontal-motion.context"
				3: name: "constant.numeric.integer.decimal.minimum-vertical-motion.context"
				4: name: "invalid.illegal.superfluous-arguments.context"
		}]


	# Change character spacing parameters: ‚Äúk {overall-spacing} {enable-kerning}‚Äù
	kerning:
		name:  "meta.command.set-kerning.context"
		begin: "^[ \\t]*(k)(?=$|\\s)[ \\t]*"
		end:   "[ \\t]*$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			match: "\\G(-?\\d+)\\s+(?:(0)|(1))(?=$|\\$)"
			captures:
				1: name: "constant.numeric.integer.decimal.overall-character-spacing.context"
				2: name: "constant.numeric.boolean.false.enable-kerning.context"
				3: name: "constant.numeric.boolean.true.enable-kerning.context"
		}]


	# Line of output
	line:
		name:  "meta.line.context"
		begin: "^[ \\t]*(N)(?=$|\\s)[ \\t]*"
		end:   "^[ \\t]*(n)(?=$|\\s)"
		beginCaptures: 1: name: "keyword.control.start.line.context"
		endCaptures:   1: name: "keyword.control.end.line.context"
		patterns: [
			# Arguments list: ‚ÄúN {type} {adj} {pads} {slack}‚Äù
			match: "\\G(f|b|n)\\s+(l|j|c|r)\\s+(\\d+)\\s+(\\d+)(?=$|\\s)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "constant.language.fill-mode.context"
				2: name: "constant.language.adjustment-mode.context"
				3: name: "constant.numeric.integer.decimal.paddable-spaces.context"
				4: name: "constant.numeric.integer.decimal.slack-available.context"
				5: name: "invalid.illegal.superfluous-arguments.context"

			{include: "#rule"}
			{include: "#commands"}
		]


	# Change line length: ‚ÄúL {n}‚Äù
	"line-length":
		name:  "meta.command.set-line-length.context"
		begin: "^[ \\t]*(L)(?=$|\\s)[ \\t]*"
		end:   "[ \\t]*$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			name: "constant.numeric.integer.decimal.line-length.context"
			match: "\\G-?\\d+(?=$|\\s)"
		}]


	# Move horizontally or vertically from current position by ùëÅ basic units
	motion:
		patterns: [{
			# Horizontal motion: ‚Äúh {n}‚Äù
			name:  "meta.command.horizontal.local-motion.context"
			begin: "^[ \\t]*(h)(?=$|\\s)[ \\t]*"
			end:   "[ \\t]*$"
			beginCaptures:
				1: name: "keyword.operator.command.context"
			patterns: [{
				name: "constant.numeric.integer.decimal.x-offset.context"
				match: "\\G-?\\d+(?=$|\\s)"
			}]
		},{
			# Vertical motion: ‚Äúv {n}‚Äù
			name:  "meta.command.vertical.local-motion.context"
			begin: "^[ \\t]*(v)(?=$|\\s)[ \\t]*"
			end:   "[ \\t]*$"
			beginCaptures:
				1: name: "keyword.operator.command.context"
			patterns: [{
				name: "constant.numeric.integer.decimal.y-offset.context"
				match: "\\G-?\\d+(?=$|\\s)"
			}]
		}]


	# Change page offset (left margin): ‚ÄúO {n}‚Äù
	offset:
		name:  "meta.command.set-page-offset.context"
		begin: "^[ \\t]*(O)(?=$|\\s)[ \\t]*"
		end:   "[ \\t]*$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			name: "constant.numeric.integer.decimal.page-offset.context"
			match: "\\G-?\\d+(?=$|\\s)"
		}]


	# A single page of output
	page:
		name:  "meta.page.context"
		begin: "^[ \\t]*(P)(?:\\s+(\\d+))?(?=$|\\s)(?:[ \\t]+(\\S.*))?[ \\t]*$"
		end:   "^[ \\t]*(p)(?:\\s+(\\d+))?(?=$|\\s)(?:[ \\t]+(\\S.*))?[ \\t]*$"
		beginCaptures:
			1: name: "keyword.control.start.page.context"
			2: name: "constant.numeric.integer.decimal.page-number.context"
			3: name: "invalid.illegal.superfluous-arguments.context"
		endCaptures:
			1: name: "keyword.control.end.page.context"
			2: name: "constant.numeric.integer.decimal.page-length.context"
			3: name: "invalid.illegal.superfluous-arguments.context"
		patterns: [
			{include: "#line"}
			{include: "#commands"}
		]


	# Second initialisation command, ostensibly responsible for defining page size
	pageinfo:
		name:  "meta.command.define-paper.context"
		begin: "^[ \\t]*(Y)(?=$|\\s)[ \\t]*"
		end:   "$"
		beginCaptures:
			1: name: "keyword.control.initialise-device.context"
		patterns: [{
			match: """(?x)
				\\G  (P|L)      # Orientation (paper/landscape)
				\\s+ ([-\\w]+)  # Paper type
				\\s+ ([-\\w]+)  # Paper size
				\\s+ (-?\\d+)   # Px
				\\s+ (-?\\d+)   # Py
				\\s+ (-?\\d+)   # Bx
				\\s+ (-?\\d+)   # By
				\\s+ (-?\\d+)   # Dx
				\\s+ (-?\\d+)   # Dy
				\\s+ (-?\\d+)   # Sx
				\\s+ (-?\\d+)   # Sy
				(?:\\s+\\S.*?)? # Anything (reserved for extensions)
				[ \\t]* $
			"""
			captures:
				1:  name: "constant.language.page-orientation.context"
				2:  name: "entity.name.paper-type.context"
				3:  name: "entity.other.paper-size.context"
				4:  name: "constant.numeric.integer.decimal.px.context"
				5:  name: "constant.numeric.integer.decimal.py.context"
				6:  name: "constant.numeric.integer.decimal.bx.context"
				7:  name: "constant.numeric.integer.decimal.by.context"
				8:  name: "constant.numeric.integer.decimal.dx.context"
				9:  name: "constant.numeric.integer.decimal.dy.context"
				10: name: "constant.numeric.integer.decimal.sx.context"
				11: name: "constant.numeric.integer.decimal.sy.context"
				12: name: "comment.ignored.unused-argument.context"
		}]



	# Draw or set thicknesses of horizontal and vertical rules
	# NOTE: This command can only be used inside an ‚ÄúN‚Ä¶n‚Äù pair
	rule:
		patterns: [{
			# Draw horizontal rule: ‚ÄúR h {size} {char}‚Äù
			name:  "meta.command.draw-rule.horizontal.context"
			begin: "^[ \\t]*(R)\\s+(h)(?=$|\\s)[ \\t]*"
			end:   "$"
			beginCaptures:
				1: name: "keyword.operator.command.context"
				2: name: "keyword.operator.drawing-direction.context"
			patterns: [{
				match: "\\G(-?\\d+)\\s+(\\S+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
				captures:
					1: name: "constant.numeric.integer.decimal.rule-length.context"
					2: patterns: [include: "#rule-character"]
					3: name: "invalid.illegal.superfluous-arguments.context"
			}]
		},{
			# Draw vertical rule: ‚ÄúR v {size} {char}‚Äù
			name:  "meta.command.draw-rule.horizontal.context"
			begin: "^[ \\t]*(R)\\s+(v)(?=$|\\s)[ \\t]*"
			end:   "$"
			beginCaptures:
				1: name: "keyword.operator.command.context"
				2: name: "keyword.operator.drawing-direction.context"
			patterns: [{
				match: "\\G(-?\\d+)\\s+(\\S+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
				captures:
					1: name: "constant.numeric.integer.decimal.rule-length.context"
					2: patterns: [include: "#rule-character"]
					3: name: "invalid.illegal.superfluous-arguments.context"
			}]
		},{
			# Set thickness of subsequent rules: ‚ÄúR t h {size}‚Äù, ‚ÄúR t v {size}‚Äù
			name:  "meta.command.set-rule-thickness.context"
			begin: "^[ \\t]*(R)\\s+(t)\\s+(h|v)(?=$|\\s)[ \\t]*"
			end:   "$"
			beginCaptures:
				1: name: "keyword.operator.command.context"
				2: name: "keyword.operator.subcommand.context"
				3: name: "keyword.operator.drawing-direction.context"
			patterns: [{
				match: "\\G(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
				captures:
					1: name: "constant.numeric.integer.decimal.thickness.context"
					2: name: "invalid.illegal.superfluous-arguments.context"
			}]
		}]


	# Stuff matched inside a tokenised ‚Äú{char}‚Äù argument of a rule-drawing command
	"rule-character":
		patterns: [{
			# Special continuation characters with ‚Äútrue‚Äù continuation
			name: "support.constant.continuation-character.context"
			match: "(?:^|\\G)(?:ru|rn|ul|bv|br)(?=$|\\s)"
		},{
			# Any other character is taken literally and repeated to create the rule
			name: "string.unquoted.repetition-character.context"
			match: "(?:^|\\G)\\S+"
		}]


	# Change width of sentence space as set by `.ss` request: ‚Äúw {n}‚Äù
	"sentence-space":
		name:  "meta.command.set-sentence-space-width.context"
		begin: "^[ \\t]*(w)(?=$|\\s)[ \\t]*"
		end:   "[ \\t]*$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			match: "\\G(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "constant.numeric.integer.decimal.space-width.context"
				2: name: "invalid.illegal.superfluous-arguments.context"
		}]



	# Shift baseline vertically by ùëÅ basic units: ‚Äús {n}‚Äù
	shift:
		name:  "meta.command.shift-baseline.context"
		begin: "^[ \\t]*(s)(?=$|\\s)[ \\t]*"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			match: "\\G(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "constant.numeric.integer.decimal.offset.context"
				2: name: "invalid.illegal.superfluous-arguments.context"
		}]


	# Slant output by ùëÅ degrees: ‚Äúx Slant {n}‚Äù
	slant:
		name:  "meta.command.slant.context"
		begin: "^[ \\t]*(x)\\s+(Slant)(?=$|\\s)[ \\t]*"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
			2: name: "keyword.operator.subcommand.context"
		patterns: [{
			match: "\\G(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "constant.numeric.integer.decimal.slant-angle.context"
				2: name: "invalid.illegal.superfluous-arguments.context"
		}]


	# Rendered text
	text:
		name:  "meta.command.display-text.context"
		begin: "^[ \\t]*(=)(?=$|\\s)[ \\t]*"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			# PostScript-style string syntax
			name:  "string.quoted.other.context"
			begin: "\\G\\("
			end:   "\\)|(?=$)"
			beginCaptures: 0: name: "punctuation.definition.string.begin.context"
			endCaptures:   0: name: "punctuation.definition.string.end.context"
			patterns: [include: "#text-escapes"]
		}]


	# Character escapes matched inside a parenthesised string literal
	"text-escapes":
		patterns: [
			{match: "(\\\\)\\\\", name: "constant.character.escape.backslash.context"}
			{match: "(\\\\)[()]", name: "constant.character.escape.bracket.context"}

			# ‚ÄúSpecial character names‚Äù, analogous to HTML character entities
			name: "constant.character.entity.named.context"
			match: "(\\()([^()]+)(\\))"
			captures:
				1: name: "punctuation.definition.entity.begin.context"
				2: name: "entity.name.character.other.context"
				3: name: "punctuation.definition.entity.end.context"
		]


	# Some directive that we don't recognise
	"unknown-line":
		name:  "invalid.unimplemented.command.context"
		begin: "\\S+"
		end:   "(?=[ \\t]*$)"


	# Change leading (vertical spacing) of subsequent lines: ‚ÄúV {n}‚Äù
	"vertical-spacing":
		name:  "meta.command.vertical-spacing.context"
		begin: "^[ \\t]*(V)(?=$|\\s)[ \\t]*"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			match: "\\G(-?\\d+)(?:[ \\t]+(\\S.*))?[ \\t]*$"
			captures:
				1: name: "constant.numeric.integer.decimal.offset.context"
				2: name: "invalid.illegal.superfluous-arguments.context"
		}]


	# Print next character without advancing drawing position
	"zero-width-print":
		name:  "meta.command.zero-width-print.context"
		begin: "^[ \\t]*(z)(?=$|\\s)[ \\t]*"
		end:   "$"
		beginCaptures:
			1: name: "keyword.operator.command.context"
		patterns: [{
			match: "\\G\\S.*?(?=\\s*$)"
			captures:
				0: name: "invalid.illegal.superfluous-arguments.context"
		}]
