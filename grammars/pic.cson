name: "Pic"
scopeName: "source.pic"
fileTypes: ["chem", "pic"]
firstLineMatch: "^#[!/].*\\bpic2plot\\b"
patterns: [
	{include: "#binary"}
	{include: "#tags"}
	{include: "#embedded-roff"}
	{include: "#embedded-latex"}
	{include: "#main"}
]


repository:
	
	# Top-level patterns
	main:
		patterns: [
			{include: "#comment"}
			{include: "#keywords"}
			{include: "#backref"}
			{include: "#macros"}
			{include: "#string"}
			{include: "#number"}
			{include: "#escaped-newline"}
			{include: "#operators"}
			{include: "#brackets"}
			{include: "#punctuation"}
			{include: "#primitives"}
			{include: "#attributes"}
			{include: "#globals"}
			{include: "#function-call"}
			{include: "#label"}
			{include: "#name"}
		]


	# Attributes
	attributes:
		name: "variable.other.property.$1.pic"
		match: """(?x)\\b
			(cw|dashed|diameter|diam|dotted|down|height|ht|invisible
			|invis|left|radius|rad|right|same|up|width|wid)\\b"""


	# Instance backreferences: "1st, last, 2nd last, 8th", etc
	backref:
		name: "variable.language.backreference.pic"
		match: "\\b(last|(?:\\d*1[1-3]th|\\d*0th|(?:(?!11st)\\d)*1st|\\d*2nd|(?:(?!13rd)\\d*)3rd|\\d*[4-9]th)(?:[ \t]+last)?)\\b"
		captures: 0: name: "entity.name.pic"


	# Lookahead to avoid highlighting binary .PIC files
	binary:
		name: "raw.binary.data"
		begin: "^(?=.*[\\x00-\\x06\\x{FFFD}])"
		end: "(?=A)B"


	# Booleans, used in DFORMAT and Grap
	boolean:
		name: "constant.boolean.$1.dformat.pic"
		match: "\\b(true|false|on|off)\\b"


	# Balanced brackets
	brackets:
		patterns: [{
			
			# Round brackets/Parentheses
			begin: "\\("
			end:   "(?=\\))|^(?=\\.P[EF]\\b)"
			patterns: [include: "#main"]
			beginCaptures:
				0: name: "punctuation.definition.bracket.round.pic"
		},{
			
			# Square brackets/brackets
			begin: "\\["
			end:   "(?=\\])|^(?=\\.P[EF]\\b)"
			patterns: [include: "#main"]
			beginCaptures:
				0: name: "punctuation.definition.bracket.square.pic"
		},{
			
			# Curly brackets/braces
			begin: "\\{"
			end:   "(?=\\})|^(?=\\.P[EF]\\b)"
			patterns: [include: "#main"]
			beginCaptures:
				0: name: "punctuation.definition.bracket.curly.pic"
		}]


	# Chemical diagram preprocessor
	chem:
		patterns: [include: "#label", {
			
			# Bond
			name: "keyword.function.bond.pic.chem"
			match: "\\b((?:(?:double|triple|front|back)[ \t]+)?\\bbond)\\b"
			captures:
				0: name: "support.function.pic.chem"
				1: name: "entity.name.function.pic.chem"
		},{
			
			# Rings
			name: "keyword.function.ring.pic.chem"
			match: "(?:\\baromatic[ \t]+)?\\b(?:benzene|(?:flat)?ring\\d*)"
			captures:
				0: name: "entity.name.function.pic.chem"
		},{
			
			# Directional modifier
			name: "keyword.operator.direction.pic.chem"
			match: "\\b(pointing)\\b"
		},{
			
			# Set size
			name: "keyword.function.set-size.pic.chem"
			match: "\\b(size)\\b[ \t]*(\\d+)"
			captures:
				1: name: "entity.name.function.pic.chem"
				2: name: "constant.numeric.parameter.pic.chem"
		},{
			
			# Branch point
			name: "keyword.control.branch-point.pic.chem"
			match: "\\bBP\\b"
		},{
			
			# Group/moiety name
			name: "string.unquoted.group-name.pic.chem"
			match: "(?=[A-Z])(?!BP)([\\w\\(\\).]+)"
			captures: 1: patterns: [
				{include: "#punctuation"}
				{match: "\\.", name: "punctuation.delimiter.period.full-stop.chem.pic"}
			]
		
		},{
			
			# Round brackets/Parentheses
			begin: "\\("
			end:   "(?=\\))|^(?=\\.P[EF]\\b|^[.']\\s*cend\\b)"
			patterns: [include: "#chem"]
			beginCaptures:
				0: name: "punctuation.definition.bracket.round.chem.pic"
		},{
			
			# Square brackets/brackets
			begin: "\\["
			end:   "(?=\\])|^(?=\\.P[EF]\\b|^[.']\\s*cend\\b)"
			patterns: [include: "#chem"]
			beginCaptures:
				0: name: "punctuation.definition.bracket.square.chem.pic"
		},{
			
			# Curly brackets/braces
			begin: "\\{"
			end:   "(?=\\})|^(?=\\.P[EF]\\b|^[.']\\s*cend\\b)"
			patterns: [include: "#chem"]
			beginCaptures:
				0: name: "punctuation.definition.bracket.curly.chem.pic"
			
		}, include: "$self"]


	# Comment lines
	comment:
		name: "comment.line.pic"
		begin: "#"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.pic"
	
	
	# DFORMAT preprocessor
	dformat:
		patterns: [ include: "#pic-line", {
			
			# Formatting descriptions
			name: "meta.format.dformat.pic"
			begin: "^style\\b"
			end:   "$"
			beginCaptures: 0: name: "keyword.function.pic"
			patterns: [ include: "#boolean", {
				
				# Recognised values
				name: "constant.language.dformat.pic"
				match: """(?x)\\b
					(addr|addrdelta|addrht|bitwid|charwid|fill|linedisp
					|linethrutext|recht|recspread|reset|textht)\\b"""
			
			}, include: "#number"]
		},{
			
			# Record
			name: "meta.record.dformat.pic"
			begin: "^\\S.*$\\n?"
			end:   "^(?=\\S)"
			beginCaptures:
				0: name: "markup.bold.heading.dformat.pic"
			patterns: [
				match: "^([ \t]+[^:\\s]+:)?(?:(?<=:)|[ \t]+)(\\S+)\\s+(.*)$"
				captures:
					0: name: "markup.list.unnumbered.dformat.pic"
					1: patterns: [include: "#main"]
					
					# Field options, expressed as a dash-separated list of values
					2: patterns: [
						{match: "-", name: "punctuation.separator.dash.dformat.pic"}
						{include: "#number"}
					]
					
					# Inline equations to process with Eqn
					3: patterns: [{
						begin: "@"
						end:   "@"
						beginCaptures: 0: name: "punctuation.definition.section.begin.eqn"
						endCaptures:   0: name: "punctuation.definition.section.end.eqn"
						patterns: [include: "text.roff#eqn"]
						contentName: "source.embedded.eqn.roff"
					}]
			]
		}]

	# Embedded TeX source
	"embedded-latex":
		name: "source.embedded.tex.pic"
		match: "^(?:\\\\\\w|%).*$"
		captures:
			0: patterns: [include: "text.tex"]
			

	# Unexpected Roff lines caught inside Pic
	"embedded-roff":
		begin: "^(?=[.'][ \t]*(?:\\w|\\\\))"
		end:   "(?<!\\\\)$|(\\\\\".*)$"
		patterns: [include: "text.roff"]
		endCaptures:
			1: patterns: [include: "text.roff"]


	# Concealed newline
	"escaped-newline":
		name: "constant.character.escape.newline.pic"
		begin: "\\\\$\\n?"
		end:   "^(?:[.'])?"
		beginCaptures:
			0: name: "punctuation.definition.escape.pic"


	# Function call
	"function-call":
		contentName: "meta.function-call.pic"
		begin: "\\b(?!\\d)(\\w+)(\\()"
		end:   "\\)"
		patterns: [include: "#main"]
		beginCaptures:
			0: name: "support.function.pic"
			1: name: "entity.name.function.pic"
			2: name: "punctuation.definition.arguments.begin.pic"
		endCaptures:
			0: name: "punctuation.definition.arguments.end.pic"


	# Global variables
	globals:
		name: "support.variable.global.pic"
		match: "(?x)\\b
			(arcrad|arrowhead|arrowht|arrowwid|boxht|boxwid|circlerad|dashwid
			|ellipseht|ellipsewid|fillval|lineht|linewid|maxpsht|maxpswid
			|moveht|movewid|scale|textht|textwid)\\b"


	# Graphs
	grap:
		patterns: [
			# Grap-specific keywords
			{match: "\\bpid\\b",              name: "variable.language.process-id.pic.grap"}
			{match: "\\bthen\\b",             name: "keyword.control.then.pic.grap"}
			{match: "\\b(in|out|through)\\b", name: "keyword.operator.pic.grap"}
			
			# Stuff shared with Pic
			{include: "#comment"}
			{include: "#string"}
			{include: "#number"}
			{include: "#boolean"}
			{include: "#punctuation"}
			{include: "#operators"}
			{include: "#function-call"}
			{include: "#macros"}
			{include: "#pic-line"}
			{
				# Primitives
				name: "keyword.function.pic.grap"
				match: """(?x)\\b
					(assignment|circle|coord|copy|draw|for|frame|graph|grid|if|label
					|line|new|next|numberlist|pic|plot|print|sh|ticks?)\\b"""
				captures: 0: name: "entity.function.name.pic.grap"
			},{
				
				# Attributes
				name: "variable.other.property.$1.pic.grap"
				match: """(?x)\\b
					(above|arrow|below|bot|bottom|dashed|dotted|down|ht|invis
					|left|log|radius|right|[lr]just|size|solid|top|up|wid|x|y)\\b"""
			},{
				
				# Built-in functions/Standard macros
				name: "support.function.grap.pic"
				match: """(?x)\\b
					(atan2|cos|exp|int|log|max|min|rand|sin|sqrt|bullet
					|plus|box|star|dot|times|htick|vtick|square|delta)\\b"""
			},{
				
				# Round brackets/Parentheses
				begin: "\\("
				end:   "(?=\\))|^(?=\\.P[EF]\\b|^[.']\\s*G2\\b)"
				patterns: [include: "#grap"]
				beginCaptures:
					0: name: "punctuation.definition.bracket.round.chem.pic"
			},{
				
				# Square brackets/brackets
				begin: "\\["
				end:   "(?=\\])|^(?=\\.P[EF]\\b|^[.']\\s*G2\\b)"
				patterns: [include: "#grap"]
				beginCaptures:
					0: name: "punctuation.definition.bracket.square.chem.pic"
			},{
				
				# Curly brackets/braces
				begin: "\\{"
				end:   "(?=\\})|^(?=\\.P[EF]\\b|^[.']\\s*G2\\b)"
				patterns: [include: "#grap"]
				beginCaptures:
					0: name: "punctuation.definition.bracket.curly.chem.pic"

			}, include: "#keywords"]


	# Keywords
	keywords:
		patterns: [{
			name: "keyword.control.$1.pic"
			match: "\\b(for|do|if|then(?=\\s*\\{)|else)\\b"
		},{
			name: "keyword.operator.$1.pic"
			match: "\\b(and|at|by|copy|from|reset|sh|then|thru|to|with|of\\s+the\\s+way\\s+between)\\b"
		}]


	# Labelled position
	label:
		match: "([A-Z][^#(\"\\s:]*)(:)"
		captures:
			1: name: "storage.type.label.pic"
			2: name: "punctuation.separator.key-value.pic"


	# User-defined macros
	macros:
		patterns: [{
			
			# Definition or deletion
			name: "meta.function.$1.pic"
			match: "(define|undef)\\b\\s*(\\w*)"
			captures:
				1: name: "storage.type.function.pic"
				2: name: "entity.name.function.pic"
		},{
			
			# Argument reference inside macro
			name: "variable.other.positional.pic"
			match: "(\\$)\\d+"
			captures:
				1: name: "punctuation.definition.variable"
		},{
			
			# Pass-through macro terminator
			begin: '(until)[ \t]+((")([^"]+)("))\\s*$\\n?'
			end:   "^[ ]*(\\4)\\b"
			patterns: [include: "$self"]
			beginCaptures:
				1: name: "keyword.control.until.pic"
				2: name: "string.quoted.double.pic"
				3: name: "punctuation.definition.string.begin.pic"
				5: name: "punctuation.definition.string.end.pic"
			endCaptures:
				1: name: "keyword.control.terminator.pic"
		}]


	# Generic variable
	name:
		name: "variable.other.pic"
		match: "(?!\\d)\\w+"


	# Numeric literal
	number:
		name: "constant.numeric.pic"
		match: "(?:(?<!\\d)[-+])?(?:\\d+(?:\\.\\d+)?|\\.\\d+|\\.(?=[Ee]))(?:[Ee][-+]?\\d+)?"


	# Mathematical symbols
	operators:
		patterns: [
			{match: "<->|<-|->",  name: "keyword.operator.arrow.pic"}
			
			match: "[=><]=?|!=|&&|\\|\\|"
			name: "keyword.operator.comparison.pic"
			
			{match: ":?=",        name: "keyword.operator.assignment.pic"}
			{match: "[-/+*%^]",   name: "keyword.operator.arithmetic.pic"}
		]


	# Primitives
	primitives:
		name: "keyword.function.pic"
		match: "\\b(box|line|arrow|circle|ellipse|arc|move|spline|print|command|plot)\\b"
		captures: 0: name: "entity.function.name.pic"


	
	# A line of Pic source embedded inside DFORMAT, Grap, etc. Obviously not used by Pic itself.
	"pic-line":
		begin: "^(pic)\\b"
		end:   "$"
		beginCaptures:
			1: name: "keyword.control.dformat.pic"
		patterns: [include: "#main"]


	# Punctuation
	punctuation:
		patterns: [
			{match: "\\}",        name: "punctuation.definition.bracket.curly.pic"}
			{match: "\\)",        name: "punctuation.definition.bracket.round.pic"}
			{match: "\\]",        name: "punctuation.definition.bracket.square.pic"}
			{match: ";",          name: "punctuation.terminator.statement.pic"}
			{match: ",",          name: "punctuation.separator.comma.pic"}
			{match: "<|>",        name: "punctuation.definition.bracket.angle.pic"}
			{match: "\\.(?!\\d)", name: "punctuation.delimiter.period.full-stop.pic"}
		]


	# "Double-quoted string"
	string:
		name: "string.quoted.double.pic"
		begin: '"'
		end:   '"'
		beginCaptures: 0: name: "punctuation.definition.string.begin.pic"
		endCaptures:   0: name: "punctuation.definition.string.end.pic"
		patterns: [{
			name: "constant.character.escape.pic"
			match: '(\\\\)[\\\\"]'
			captures:
				1: name: "punctuation.definition.escape.pic"
		},{
			match: "(?:[^\"\\\\]|\\\\[^\"])+"
			captures:
				0: patterns: [include: "text.roff#escapes"]
		}]


	# Lines which delimit regions of preprocessor source
	tags:
		patterns: [{
			
			# .PS <file: Load a PIC file at current position
			name: "invalid.deprecated.function.picture.macro.roff"
			match: "^([.'])[ \t]*(PS)[ \t]*(<)(.*)(?=$|\\\\\")"
			captures:
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
				3: {name: "punctuation.definition.filename.roff"}
				4: {patterns: [include: "text.roff#params"]}
		},{
			
			# .PS/.PE: Pic
			begin: "^([.'])[ \t]*(PS)\\b([\\d \t]*(?:#.*)?)?(\\\\[#\"].*)?$"
			end:   "^([.'])[ \t]*(P[EF])\\b"
			contentName: "source.embedded.pic"
			patterns: [include: "$self"]
			beginCaptures:
				0: {name: "meta.function.begin.picture.section.macro.roff"}
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
				3: {patterns: [include: "source.pic"]}
				4: {patterns: [include: "text.roff#escapes"]}
			endCaptures:
				0: {name: "meta.function.end.picture.section.macro.roff"}
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.name.function.roff"}
		},{
			
			# .cstart/.cend: Chem
			begin: "^([.'])[ \t]*(cstart)\\b\\s*(\\S.*)?"
			end:   "^([.'])[ \t]*(cend)\\b"
			contentName: "source.embedded.chem.pic"
			patterns: [include: "#chem"]
			beginCaptures:
				0: {name: "meta.function.begin.chemical.picture.section.macro.roff"}
				1: {name: "punctuation.definition.macro.pic.chem"}
				2: {name: "entity.function.name.roff"}
				3: {name: "invalid.illegal.unexpected-characters.pic.chem"}
			endCaptures:
				0: {name: "meta.function.end.chemical.picture.section.macro.roff"}
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
		},{
			
			# .begin dformat: DFORMAT delimiters
			begin: "^([.'])[ \t]*(begin[ \t]+dformat)\\b"
			end:   "^([.'])[ \t]*(end)\\b"
			contentName: "source.embedded.dformat.pic"
			patterns: [include: "#dformat"]
			beginCaptures:
				0: {name: "meta.function.begin.dformat.picture.section.macro.roff"}
				1: {name: "punctuation.definition.macro.pic.dformat"}
				2: {name: "entity.function.name.roff"}
			endCaptures:
				0: {name: "meta.function.end.dformat.picture.section.macro.roff"}
				1: {name: "punctuation.definition.macro.roff"}
				2: {name: "entity.function.name.roff"}
		},{
			
			# .G1/.G2: Grap
			begin: "^([.'])[ \t]*(G1)\\b(\\s*\\d+)?(\\s*\\\\\".*$)?"
			end:   "^([.'])[ \t]*(G2)\\b"
			contentName: "source.embedded.grap.pic"
			patterns: [include: "#grap"]
			beginCaptures:
				0: {name: "meta.function.begin.graph.picture.section.macro.roff"}
				1: {name: "punctuation.definition.macro.pic.grap"}
				2: {name: "entity.function.name.roff"}
				3: {name: "constant.numeric.parameter.pic.grap"}
				4: {patterns: [include: "text.roff#escapes"]}
			endCaptures:
				0: {name: "meta.function.end.graph.picture.section.macro.roff"}
				1: {name: "punctuation.definition.macro.pic.grap"}
				2: {name: "entity.function.name.roff"}
		}]
